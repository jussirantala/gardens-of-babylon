"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.targetConstructorToSchema = exports.validationMetadataArrayToSchemas = exports.validationMetadatasToSchemas = exports.JSONSchema = void 0;
const tslib_1 = require("tslib");
const cv = tslib_1.__importStar(require("class-validator"));
const lodash_groupby_1 = tslib_1.__importDefault(require("lodash.groupby"));
const lodash_merge_1 = tslib_1.__importDefault(require("lodash.merge"));
const decorators_1 = require("./decorators");
const defaultConverters_1 = require("./defaultConverters");
const options_1 = require("./options");
var decorators_2 = require("./decorators");
Object.defineProperty(exports, "JSONSchema", { enumerable: true, get: function () { return decorators_2.JSONSchema; } });
function validationMetadatasToSchemas(userOptions) {
    const options = Object.assign(Object.assign({}, options_1.defaultOptions), userOptions);
    const metadatas = getMetadatasFromStorage(options.classValidatorMetadataStorage);
    return validationMetadataArrayToSchemas(metadatas, userOptions);
}
exports.validationMetadatasToSchemas = validationMetadatasToSchemas;
function validationMetadataArrayToSchemas(metadatas, userOptions) {
    const options = Object.assign(Object.assign({}, options_1.defaultOptions), userOptions);
    const schemas = {};
    Object.entries(lodash_groupby_1.default(metadatas, ({ target }) => { var _a; return (_a = target[options.schemaNameField]) !== null && _a !== void 0 ? _a : target.name; })).forEach(([key, ownMetas]) => {
        const target = ownMetas[0].target;
        const metas = ownMetas
            .concat(getInheritedMetadatas(target, metadatas))
            .filter((propMeta) => !isExcluded(propMeta, options));
        const properties = {};
        Object.entries(lodash_groupby_1.default(metas, 'propertyName')).forEach(([propName, propMetas]) => {
            const schema = applyConverters(propMetas, options);
            properties[propName] = applyDecorators(schema, target, options, propName);
        });
        const definitionSchema = {
            properties,
            type: 'object',
        };
        const required = getRequiredPropNames(target, metas, options);
        if (required.length > 0) {
            definitionSchema.required = required;
        }
        schemas[key] = applyDecorators(definitionSchema, target, options, target.name);
    });
    return schemas;
}
exports.validationMetadataArrayToSchemas = validationMetadataArrayToSchemas;
function targetConstructorToSchema(targetConstructor, userOptions) {
    const options = Object.assign(Object.assign({}, options_1.defaultOptions), userOptions);
    const storage = options.classValidatorMetadataStorage;
    let metadatas = storage.getTargetValidationMetadatas(targetConstructor, '', true, false);
    metadatas = populateMetadatasWithConstraints(storage, metadatas);
    const schemas = validationMetadataArrayToSchemas(metadatas, userOptions);
    return Object.values(schemas).length ? Object.values(schemas)[0] : {};
}
exports.targetConstructorToSchema = targetConstructorToSchema;
function getMetadatasFromStorage(storage) {
    const metadatas = storage.validationMetadatas;
    return populateMetadatasWithConstraints(storage, metadatas);
}
function populateMetadatasWithConstraints(storage, metadatas) {
    const constraints = storage.constraintMetadatas;
    return metadatas.map((meta) => {
        if (meta.constraintCls) {
            const constraint = constraints.find((c) => c.target === meta.constraintCls);
            if (constraint) {
                return Object.assign(Object.assign({}, meta), { type: constraint.name });
            }
        }
        return meta;
    });
}
function getInheritedMetadatas(target, metadatas) {
    return metadatas.filter((d) => d.target instanceof Function &&
        target.prototype instanceof d.target &&
        !metadatas.find((m) => m.propertyName === d.propertyName &&
            m.target === target &&
            m.type === d.type));
}
function applyConverters(propertyMetadatas, options) {
    const converters = Object.assign(Object.assign({}, defaultConverters_1.defaultConverters), options.additionalConverters);
    const convert = (meta) => {
        var _a;
        const typeMeta = (_a = options.classTransformerMetadataStorage) === null || _a === void 0 ? void 0 : _a.findTypeMetadata(meta.target, meta.propertyName);
        const isMap = typeMeta &&
            typeMeta.reflectedType &&
            new typeMeta.reflectedType() instanceof Map;
        const converter = converters[meta.type] || converters[cv.ValidationTypes.CUSTOM_VALIDATION];
        const items = typeof converter === 'function' ? converter(meta, options) : converter;
        if (meta.each && isMap) {
            return {
                additionalProperties: Object.assign({}, items),
                type: 'object',
            };
        }
        return meta.each ? { items, type: 'array' } : items;
    };
    return lodash_merge_1.default({}, ...propertyMetadatas.map(convert));
}
function isExcluded(propertyMetadata, options) {
    var _a;
    return !!((_a = options.classTransformerMetadataStorage) === null || _a === void 0 ? void 0 : _a.findExcludeMetadata(propertyMetadata.target, propertyMetadata.propertyName));
}
function applyDecorators(schema, target, options, propertyName) {
    const additionalSchema = decorators_1.getMetadataSchema(target.prototype, propertyName);
    return typeof additionalSchema === 'function'
        ? additionalSchema(schema, options)
        : lodash_merge_1.default({}, schema, additionalSchema);
}
function getRequiredPropNames(target, metadatas, options) {
    function isDefined(metas) {
        return (metas && metas.some(({ type }) => type === cv.ValidationTypes.IS_DEFINED));
    }
    function isOptional(metas) {
        return (metas &&
            metas.some(({ type }) => [cv.ValidationTypes.CONDITIONAL_VALIDATION, cv.IS_EMPTY].includes(type)));
    }
    return Object.entries(lodash_groupby_1.default(metadatas, (m) => m.propertyName))
        .filter(([_, metas]) => {
        const own = metas.filter((m) => m.target === target);
        const inherited = metas.filter((m) => m.target !== target);
        return options.skipMissingProperties
            ? isDefined(own) || (!isOptional(own) && isDefined(inherited))
            : !(isOptional(own) || isOptional(inherited));
    })
        .map(([name]) => name);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLDREQUFxQztBQUdyQyw0RUFBcUM7QUFDckMsd0VBQWlDO0FBR2pDLDZDQUFnRDtBQUNoRCwyREFBdUQ7QUFDdkQsdUNBQW9EO0FBRXBELDJDQUF5QztBQUFoQyx3R0FBQSxVQUFVLE9BQUE7QUFLbkIsU0FBZ0IsNEJBQTRCLENBQzFDLFdBQStCO0lBRS9CLE1BQU0sT0FBTyxtQ0FDUix3QkFBYyxHQUNkLFdBQVcsQ0FDZixDQUFBO0lBRUQsTUFBTSxTQUFTLEdBQUcsdUJBQXVCLENBQ3ZDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FDdEMsQ0FBQTtJQUVELE9BQU8sZ0NBQWdDLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFBO0FBQ2pFLENBQUM7QUFiRCxvRUFhQztBQUtELFNBQWdCLGdDQUFnQyxDQUM5QyxTQUErQixFQUMvQixXQUErQjtJQUUvQixNQUFNLE9BQU8sbUNBQ1Isd0JBQWMsR0FDZCxXQUFXLENBQ2YsQ0FBQTtJQUVELE1BQU0sT0FBTyxHQUFvQyxFQUFFLENBQUE7SUFDbkQsTUFBTSxDQUFDLE9BQU8sQ0FDWix3QkFBUSxDQUNOLFNBQVMsRUFDVCxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSx3QkFDYixNQUFNLENBQUMsT0FBTyxDQUFDLGVBQXNDLENBQUMsbUNBQ3JELE1BQW1CLENBQUMsSUFBSSxHQUFBLENBQzVCLENBQ0YsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFO1FBQzVCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFrQixDQUFBO1FBQzdDLE1BQU0sS0FBSyxHQUFHLFFBQVE7YUFDbkIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQzthQUNoRCxNQUFN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